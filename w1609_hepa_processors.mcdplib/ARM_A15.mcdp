mcdp {
    requires power [W]
    requires budget [USD]
    requires mass [g]

    provides resolution [pixels/deg]
    provides min_throughput [Hz]
    provides inverse_of_max_latency [1/s]

    # fit of latency as a function of resolution
    l0 = -0.00051374 s
    l1 = +0.00094873 s * deg / pixels
    l2 = +0.00018409 s * deg² / pixels²
    # when the result is positive
    # note that it is negative for r = 0
    r = max(provided resolution, 0.5 pixel/deg)
    latency = l0 + l1 · r + l2 · r²

    # fit of usage as a function of resolution
    u0 = +1.27195274 dimensionless
    u1 = +0.61080924 deg / pixels
    u2 = +0.20184672 deg² / pixels²
    usage = u0 + u1 · r + u2 · r²

    # usage cannot go over 100%
    usage ≼ 100 dimensionless

    # Constraint for throughput:
    #   latency <= 1 / min_throughput
    # rewritten as:
    provided min_throughput · latency ≼ 1 dimensionless

    # Constraint for latency:
    #  latency <= max_latency
    # rewritten as:
    latency · provided inverse_of_max_latency ≼ 1

    # compute power consumption using linear interpolation
    power_idle = 1 W
    power_peak = 4 W
    P = power_idle + (power_peak - power_idle) · usage / 100 dimensionless
    required power ≽ P

    required budget ≽ 30 USD
    required mass ≽ 20g
}
